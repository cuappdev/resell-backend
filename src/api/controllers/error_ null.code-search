# Query: error: null
# Flags: CaseSensitive
# ContextLines: 1

11 results - 3 files

src/api/controllers/AuthController.ts:
  22        const user = await this.authService.createUser(createUserRequest);
  23:       return { success: true, user: user };
  24      }

  27      async deleteUserById(@Params() params: UuidParam): Promise<GetUserResponse> {
  28:       return { success: true, user: await this.authService.deleteUserById(params.id) };
  29      }

src/api/controllers/PostController.ts:
  27        const posts = await this.postService.getAllPosts();
  28:       return { success: true, posts: posts.map((post) => post.getPostInfo()) };
  29      }

  32      async getPostById(@Params() params: UuidParam): Promise<GetPostResponse> {
  33:       return { success: true, post: await this.postService.getPostById(params.id) };
  34      }

  37      async getPostsByUserId(@Params() params: UuidParam): Promise<GetPostsResponse> {
  38:       return { success: true, posts: await this.postService.getPostsByUserId(params.id) };
  39      }

  43        const post = await this.postService.createPost(createPostRequest);
  44:       return { success: true, post: post };
  45      }

  48      async deletePostById(@Params() params: UuidParam): Promise<GetPostResponse> {
  49:       return { success: true, post: await this.postService.deletePostById(params.id) };
  50      }

src/api/controllers/UserController.ts:
  51      async getUserByPostId(@Params() params: UuidParam): Promise<GetUserResponse> {
  52:       return { success: true, user: await this.userService.getUserByPostId(params.id) }; 
  53      }

  56    async getUserByEmail(@Body() getUserByEmailRequest: GetUserByEmailRequest): Promise<GetUserResponse> {
  57:     return { success: true, user: await this.userService.getUserByEmail(getUserByEmailRequest.email) }; 
  58    }

  62      const user = await this.userService.createUser(createUserRequest);
  63:     return { success: true, user: user };
  64    }

  67    async deleteUserById(@Params() params: UuidParam): Promise<GetUserResponse> {
  68:     return { success: true, user: await this.userService.deleteUserById(params.id) };
  69    }
